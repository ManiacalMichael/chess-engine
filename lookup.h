/*
 * * * lookup.h
 * Attack & movement lookup tables
 */
#ifndef INCLUDE_LOOKUP_H
#define INCLUDE_LOOKUP_H

#include <stdint.h>

/*
 * Sliding attack lookups:
 *  Attacks along any rank, file, or diagonal can be visualized as an
 *  attack along the back rank:
 * 0 0 0 0 0 0 0 a
 * 0 0 0 0 0 0 0 b
 * 0 0 0 0 0 0 0 c
 * 0 0 0 0 0 0 0 d
 * 0 0 0 0 0 0 0 e
 * 0 0 0 0 0 0 0  <- Rook
 * 0 0 0 0 0 0 0 g
 * 0 0 0 0 0 0 0 h
 *
 * 	=
 * 	     |
 * a b c d e   g h
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 ...
 *
 * What squares on the back rank are attacked depends on where the rook is
 * on the rank and what the occupancy of that rank is:
 * Occupancy :
 * 0 1 0 0 0 1 0 0
 *           R
 *      =
 * 0 1 1 1 1 0 1 1	<- Attack set
 *
 * So instead of calculating the attack set every time, it can be
 * generated before hand as an array of 8bit values indexed by:
 * [position_on_rank][occupancy_of_rank]
 * 8 * 256 = 2048 bytes
 *
 * This can be further reduced because the occupancy of the 0 and 7 squares
 * is irrelevant; whether or not they are attacked depends purely on the
 * occupancy of the other six squares and the position of the attacker:
 *
 * 1 0 0 1 0 1 0 0
 *       R
 *    =
 * 1 1 1 0 1 1 0 0	<- Attack set
 *
 * AND
 *
 * 0 0 0 1 0 1 0 1
 *       R
 *    =
 * 1 1 1 0 1 1 0 0	<- Attack set
 *
 * By only considering the occupancy of the center squares we can reduce
 * the size of the lookup table fourfold:
 * [position_on_rank][occupancy_of_center]
 * [8][64]
 * 8 * 64 = 512 bytes
 */
/*
 * How to use lookup:
 * As an example, consider swne diagonal of the bishop on C1
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 1
 * 0 0 0 0 0 0 1 0
 * 0 0 0 0 0 1 0 0
 * 0 0 0 0 1 0 0 0
 * 0 0 0 1 0 0 0 0
 * 0 0 1 0 0 0 0 0
 * This can be turned into a lookup by first using fill multiplication:
 * 0x0000804020100804ull * 0x0101010101010101ull =
 * 0 0 1 1 1 1 1 1
 * 0 0 1 1 1 1 1 1
 * 0 0 1 1 1 1 1 1
 * 0 0 1 1 1 1 1 0
 * 0 0 1 1 1 1 0 0
 * 0 0 1 1 1 0 0 0
 * 0 0 1 1 0 0 0 0
 * 0 0 1 0 0 0 0 0
 * And shifting this down by 56:
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 0
 * 0 0 0 0 0 0 0 0
 * 0 0 1 1 1 1 1 1
 *
 * After lookup the resulting value can be multiplied by 0x0101010101010101
 * and then & with the original diagonal will yield the attack set
 */
/* This array was generated by a short little program, which means it has
 * the added benefit of working whether or not the bit is set on the square
 * the attacker is on
 */
const uint8_t sliding_attack_lookups[512] = {
	/* Indice = (6bit key * 8) + file */
	/* 00000000 */
	0xfe, 0xfd, 0xfb, 0xf7, 0xef, 0xdf, 0xbf, 0x7f, 
	/* 01000000 */
	0x2, 0xfd, 0xfa, 0xf6, 0xee, 0xde, 0xbe, 0x7e, 
	/* 00100000 */
	0x6, 0x5, 0xfb, 0xf4, 0xec, 0xdc, 0xbc, 0x7c, 
	/* 01100000 */
	0x2, 0x5, 0xfa, 0xf4, 0xec, 0xdc, 0xbc, 0x7c, 
	/* 00010000 */
	0xe, 0xd, 0xb, 0xf7, 0xe8, 0xd8, 0xb8, 0x78, 
	/* 01010000 */
	0x2, 0xd, 0xa, 0xf6, 0xe8, 0xd8, 0xb8, 0x78, 
	/* 00110000 */
	0x6, 0x5, 0xb, 0xf4, 0xe8, 0xd8, 0xb8, 0x78, 
	/* 01110000 */
	0x2, 0x5, 0xa, 0xf4, 0xe8, 0xd8, 0xb8, 0x78, 
	/* 00001000 */
	0x1e, 0x1d, 0x1b, 0x17, 0xef, 0xd0, 0xb0, 0x70, 
	/* 01001000 */
	0x2, 0x1d, 0x1a, 0x16, 0xee, 0xd0, 0xb0, 0x70, 
	/* 00101000 */
	0x6, 0x5, 0x1b, 0x14, 0xec, 0xd0, 0xb0, 0x70, 
	/* 01101000 */
	0x2, 0x5, 0x1a, 0x14, 0xec, 0xd0, 0xb0, 0x70, 
	/* 00011000 */
	0xe, 0xd, 0xb, 0x17, 0xe8, 0xd0, 0xb0, 0x70, 
	/* 01011000 */
	0x2, 0xd, 0xa, 0x16, 0xe8, 0xd0, 0xb0, 0x70, 
	/* 00111000 */
	0x6, 0x5, 0xb, 0x14, 0xe8, 0xd0, 0xb0, 0x70, 
	/* 01111000 */
	0x2, 0x5, 0xa, 0x14, 0xe8, 0xd0, 0xb0, 0x70, 
	/* 00000100 */
	0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0xdf, 0xa0, 0x60, 
	/* 01000100 */
	0x2, 0x3d, 0x3a, 0x36, 0x2e, 0xde, 0xa0, 0x60, 
	/* 00100100 */
	0x6, 0x5, 0x3b, 0x34, 0x2c, 0xdc, 0xa0, 0x60, 
	/* 01100100 */
	0x2, 0x5, 0x3a, 0x34, 0x2c, 0xdc, 0xa0, 0x60, 
	/* 00010100 */
	0xe, 0xd, 0xb, 0x37, 0x28, 0xd8, 0xa0, 0x60, 
	/* 01010100 */
	0x2, 0xd, 0xa, 0x36, 0x28, 0xd8, 0xa0, 0x60, 
	/* 00110100 */
	0x6, 0x5, 0xb, 0x34, 0x28, 0xd8, 0xa0, 0x60, 
	/* 01110100 */
	0x2, 0x5, 0xa, 0x34, 0x28, 0xd8, 0xa0, 0x60, 
	/* 00001100 */
	0x1e, 0x1d, 0x1b, 0x17, 0x2f, 0xd0, 0xa0, 0x60, 
	/* 01001100 */
	0x2, 0x1d, 0x1a, 0x16, 0x2e, 0xd0, 0xa0, 0x60, 
	/* 00101100 */
	0x6, 0x5, 0x1b, 0x14, 0x2c, 0xd0, 0xa0, 0x60, 
	/* 01101100 */
	0x2, 0x5, 0x1a, 0x14, 0x2c, 0xd0, 0xa0, 0x60, 
	/* 00011100 */
	0xe, 0xd, 0xb, 0x17, 0x28, 0xd0, 0xa0, 0x60, 
	/* 01011100 */
	0x2, 0xd, 0xa, 0x16, 0x28, 0xd0, 0xa0, 0x60, 
	/* 00111100 */
	0x6, 0x5, 0xb, 0x14, 0x28, 0xd0, 0xa0, 0x60, 
	/* 01111100 */
	0x2, 0x5, 0xa, 0x14, 0x28, 0xd0, 0xa0, 0x60, 
	/* 00000010 */
	0x7e, 0x7d, 0x7b, 0x77, 0x6f, 0x5f, 0xbf, 0x40, 
	/* 01000010 */
	0x2, 0x7d, 0x7a, 0x76, 0x6e, 0x5e, 0xbe, 0x40, 
	/* 00100010 */
	0x6, 0x5, 0x7b, 0x74, 0x6c, 0x5c, 0xbc, 0x40, 
	/* 01100010 */
	0x2, 0x5, 0x7a, 0x74, 0x6c, 0x5c, 0xbc, 0x40, 
	/* 00010010 */
	0xe, 0xd, 0xb, 0x77, 0x68, 0x58, 0xb8, 0x40, 
	/* 01010010 */
	0x2, 0xd, 0xa, 0x76, 0x68, 0x58, 0xb8, 0x40, 
	/* 00110010 */
	0x6, 0x5, 0xb, 0x74, 0x68, 0x58, 0xb8, 0x40, 
	/* 01110010 */
	0x2, 0x5, 0xa, 0x74, 0x68, 0x58, 0xb8, 0x40, 
	/* 00001010 */
	0x1e, 0x1d, 0x1b, 0x17, 0x6f, 0x50, 0xb0, 0x40, 
	/* 01001010 */
	0x2, 0x1d, 0x1a, 0x16, 0x6e, 0x50, 0xb0, 0x40, 
	/* 00101010 */
	0x6, 0x5, 0x1b, 0x14, 0x6c, 0x50, 0xb0, 0x40, 
	/* 01101010 */
	0x2, 0x5, 0x1a, 0x14, 0x6c, 0x50, 0xb0, 0x40, 
	/* 00011010 */
	0xe, 0xd, 0xb, 0x17, 0x68, 0x50, 0xb0, 0x40, 
	/* 01011010 */
	0x2, 0xd, 0xa, 0x16, 0x68, 0x50, 0xb0, 0x40, 
	/* 00111010 */
	0x6, 0x5, 0xb, 0x14, 0x68, 0x50, 0xb0, 0x40, 
	/* 01111010 */
	0x2, 0x5, 0xa, 0x14, 0x68, 0x50, 0xb0, 0x40, 
	/* 00000110 */
	0x3e, 0x3d, 0x3b, 0x37, 0x2f, 0x5f, 0xa0, 0x40, 
	/* 01000110 */
	0x2, 0x3d, 0x3a, 0x36, 0x2e, 0x5e, 0xa0, 0x40, 
	/* 00100110 */
	0x6, 0x5, 0x3b, 0x34, 0x2c, 0x5c, 0xa0, 0x40, 
	/* 01100110 */
	0x2, 0x5, 0x3a, 0x34, 0x2c, 0x5c, 0xa0, 0x40, 
	/* 00010110 */
	0xe, 0xd, 0xb, 0x37, 0x28, 0x58, 0xa0, 0x40, 
	/* 01010110 */
	0x2, 0xd, 0xa, 0x36, 0x28, 0x58, 0xa0, 0x40, 
	/* 00110110 */
	0x6, 0x5, 0xb, 0x34, 0x28, 0x58, 0xa0, 0x40, 
	/* 01110110 */
	0x2, 0x5, 0xa, 0x34, 0x28, 0x58, 0xa0, 0x40, 
	/* 00001110 */
	0x1e, 0x1d, 0x1b, 0x17, 0x2f, 0x50, 0xa0, 0x40, 
	/* 01001110 */
	0x2, 0x1d, 0x1a, 0x16, 0x2e, 0x50, 0xa0, 0x40, 
	/* 00101110 */
	0x6, 0x5, 0x1b, 0x14, 0x2c, 0x50, 0xa0, 0x40, 
	/* 01101110 */
	0x2, 0x5, 0x1a, 0x14, 0x2c, 0x50, 0xa0, 0x40, 
	/* 00011110 */
	0xe, 0xd, 0xb, 0x17, 0x28, 0x50, 0xa0, 0x40, 
	/* 01011110 */
	0x2, 0xd, 0xa, 0x16, 0x28, 0x50, 0xa0, 0x40, 
	/* 00111110 */
	0x6, 0x5, 0xb, 0x14, 0x28, 0x50, 0xa0, 0x40, 
	/* 01111110 */
	0x2, 0x5, 0xa, 0x14, 0x28, 0x50, 0xa0, 0x40
};

const uint64_t king_attack_lookups[64] = {
        0x302ull, 
        0x705ull, 
        0xe0aull, 
        0x1c14ull, 
        0x3828ull, 
        0x7050ull, 
        0xe0a0ull, 
        0xc040ull, 
        0x30203ull, 
        0x70507ull, 
        0xe0a0eull, 
        0x1c141cull, 
        0x382838ull, 
        0x705070ull, 
        0xe0a0e0ull, 
        0xc040c0ull, 
        0x3020300ull, 
        0x7050700ull, 
        0xe0a0e00ull, 
        0x1c141c00ull, 
        0x38283800ull, 
        0x70507000ull, 
        0xe0a0e000ull, 
        0xc040c000ull, 
        0x302030000ull, 
        0x705070000ull, 
        0xe0a0e0000ull, 
        0x1c141c0000ull, 
        0x3828380000ull, 
        0x7050700000ull, 
        0xe0a0e00000ull, 
        0xc040c00000ull, 
        0x30203000000ull, 
        0x70507000000ull, 
        0xe0a0e000000ull, 
        0x1c141c000000ull, 
        0x382838000000ull, 
        0x705070000000ull, 
        0xe0a0e0000000ull, 
        0xc040c0000000ull, 
        0x3020300000000ull, 
        0x7050700000000ull, 
        0xe0a0e00000000ull, 
        0x1c141c00000000ull, 
        0x38283800000000ull, 
        0x70507000000000ull, 
        0xe0a0e000000000ull, 
        0xc040c000000000ull, 
        0x302030000000000ull, 
        0x705070000000000ull, 
        0xe0a0e0000000000ull, 
        0x1c141c0000000000ull, 
        0x3828380000000000ull, 
        0x7050700000000000ull, 
        0xe0a0e00000000000ull, 
        0xc040c00000000000ull, 
        0x203000000000000ull, 
        0x507000000000000ull, 
        0xa0e000000000000ull, 
        0x141c000000000000ull, 
        0x2838000000000000ull, 
        0x5070000000000000ull, 
        0xa0e0000000000000ull, 
        0x40c0000000000000ull
};

const uint64_t knight_attack_lookups[64] = {
	0x20400ull,
	0x50800ull,
	0xa1100ull,
	0x142200ull,
	0x284400ull,
	0x508800ull,
	0xa01000ull,
	0x402000ull,
	0x2040004ull,
	0x5080008ull,
	0xa110011ull,
	0x14220022ull,
	0x28440044ull,
	0x50880088ull,
	0xa0100010ull,
	0x40200020ull,
	0x204000402ull,
	0x508000805ull,
	0xa1100110aull,
	0x1422002214ull,
	0x2844004428ull,
	0x5088008850ull,
	0xa0100010a0ull,
	0x4020002040ull,
	0x20400040200ull,
	0x50800080500ull,
	0xa1100110a00ull,
	0x142200221400ull,
	0x284400442800ull,
	0x508800885000ull,
	0xa0100010a000ull,
	0x402000204000ull,
	0x2040004020000ull,
	0x5080008050000ull,
	0xa1100110a0000ull,
	0x14220022140000ull,
	0x28440044280000ull,
	0x50880088500000ull,
	0xa0100010a00000ull,
	0x40200020400000ull,
	0x204000402000000ull,
	0x508000805000000ull,
	0xa1100110a000000ull,
	0x1422002214000000ull,
	0x2844004428000000ull,
	0x5088008850000000ull,
	0xa0100010a0000000ull,
	0x4020002040000000ull,
	0x400040200000000ull,
	0x800080500000000ull,
	0x1100110a00000000ull,
	0x2200221400000000ull,
	0x4400442800000000ull,
	0x8800885000000000ull,
	0x100010a000000000ull,
	0x2000204000000000ull,
	0x4020000000000ull,
	0x8050000000000ull,
	0x110a0000000000ull,
	0x22140000000000ull,
	0x44280000000000ull,
	0x88500000000000ull,
	0x10a00000000000ull,
	0x20400000000000ull
};

/* table for two square jumps for pawns on starting rank */
const uint64_t pawn_twosquare[8] = {
	0x10100ull,
	0x20200ull,
	0x40400ull,
	0x80800ull,
	0x101000ull,
	0x202000ull,
	0x404000ull,
	0x808000ull
};

const uint64_t pawn_movement[64] = {
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x100ull,
	0x200ull,
	0x400ull,
	0x800ull,
	0x1000ull,
	0x2000ull,
	0x4000ull,
	0x8000ull,
	0x10000ull,
	0x20000ull,
	0x40000ull,
	0x80000ull,
	0x100000ull,
	0x200000ull,
	0x400000ull,
	0x800000ull,
	0x1000000ull,
	0x2000000ull,
	0x4000000ull,
	0x8000000ull,
	0x10000000ull,
	0x20000000ull,
	0x40000000ull,
	0x80000000ull,
	0x100000000ull,
	0x200000000ull,
	0x400000000ull,
	0x800000000ull,
	0x1000000000ull,
	0x2000000000ull,
	0x4000000000ull,
	0x8000000000ull,
	0x10000000000ull,
	0x20000000000ull,
	0x40000000000ull,
	0x80000000000ull,
	0x100000000000ull,
	0x200000000000ull,
	0x400000000000ull,
	0x800000000000ull,
	0x1000000000000ull,
	0x2000000000000ull,
	0x4000000000000ull,
	0x8000000000000ull,
	0x10000000000000ull,
	0x20000000000000ull,
	0x40000000000000ull,
	0x80000000000000ull
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull
};

const uint64_t pawn_captures[64] = {
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x200ull,
	0x500ull,
	0x1400ull,
	0x2800ull,
	0x5000ull,
	0xa000ull,
	0x4000ull,
	0x20000ull,
	0x50000ull,
	0xa0000ull,
	0x140000ull,
	0x280000ull,
	0x500000ull,
	0xa00000ull,
	0x400000ull,
	0x2000000ull,
	0x5000000ull,
	0xa000000ull,
	0x14000000ull,
	0x28000000ull,
	0x50000000ull,
	0xa0000000ull,
	0x40000000ull,
	0x200000000ull,
	0x500000000ull,
	0xa00000000ull,
	0x1400000000ull,
	0x2800000000ull,
	0x5000000000ull,
	0xa000000000ull,
	0x4000000000ull,
	0x20000000000ull,
	0x50000000000ull,
	0xa0000000000ull,
	0x140000000000ull,
	0x280000000000ull,
	0x500000000000ull,
	0xa00000000000ull,
	0x400000000000ull,
	0x2000000000000ull,
	0x5000000000000ull,
	0xa000000000000ull,
	0x14000000000000ull,
	0x28000000000000ull,
	0x50000000000000ull,
	0xa0000000000000ull,
	0x40000000000000ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull,
	0x0ull
};

